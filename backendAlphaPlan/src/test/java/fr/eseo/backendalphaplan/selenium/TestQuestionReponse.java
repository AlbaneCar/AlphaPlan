package fr.eseo.backendalphaplan.selenium;// Generated by Selenium IDE
import org.junit.jupiter.api.*;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;

class TestQuestionReponse {

    private static WebDriver webdriver;
    private static final String frontendURL = SeleniumProperties.FRONTEND_URL;

    @BeforeAll
    public static void beforeTests() {
        ChromeOptions options = new ChromeOptions();
        TestQuestionReponse.webdriver = new ChromeDriver(options);
        TestQuestionReponse.webdriver.get(frontendURL + "/login");
        WebDriverWait wait = new WebDriverWait(TestQuestionReponse.webdriver, Duration.ofSeconds(20));
        WebElement paramAvance = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("details-button")));
        paramAvance.click();
        WebElement continueLink = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("proceed-link")));
        continueLink.click();
        // entrée de l'adresse e-mail
        WebElement mail = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("#mail")));
        mail.sendKeys("admin@mail.com");

        // entrée du mot de passe
        WebElement pass = TestQuestionReponse.webdriver.findElement(By.id("password"));
        pass.sendKeys("admin");

        // clic sur connexion
        WebElement button = TestQuestionReponse.webdriver.findElement(By.xpath("//button[contains(text(), 'Se connecter')]"));
        button.click();
        wait.until(ExpectedConditions.urlToBe(frontendURL + "/homepage"));
    }
    

    @Test
    void testQuestionReponse() {
        WebDriverWait wait = new WebDriverWait(TestQuestionReponse.webdriver, Duration.ofSeconds(20));
        TestQuestionReponse.webdriver.findElement(By.cssSelector(".flex:nth-child(15) .text-sm")).click();
        TestQuestionReponse.webdriver.findElement(By.cssSelector(".leading-5")).click();
        TestQuestionReponse.webdriver.findElement(By.cssSelector(".w-\\[500px\\]:nth-child(1)")).click();
        TestQuestionReponse.webdriver.findElement(By.cssSelector(".w-\\[500px\\]:nth-child(1)")).sendKeys("titre");

        // Check if the input contains the correct text
        WebElement inputTitle = TestQuestionReponse.webdriver.findElement(By.cssSelector(".w-\\[500px\\]:nth-child(1)"));
        Assertions.assertEquals("titre", inputTitle.getAttribute("value"), "Input title does not contain the correct text");

        TestQuestionReponse.webdriver.findElement(By.cssSelector(".w-\\[500px\\]:nth-child(2)")).click();
        {
            WebElement dropdown = TestQuestionReponse.webdriver.findElement(By.cssSelector(".w-\\[500px\\]:nth-child(2)"));
            dropdown.findElement(By.xpath("//option[. = 'a']")).click();
        }

        // Check if the dropdown selection is correct
        WebElement dropdown = TestQuestionReponse.webdriver.findElement(By.cssSelector(".w-\\[500px\\]:nth-child(2)"));
        Assertions.assertEquals("a", dropdown.getAttribute("value"), "Dropdown selection is not correct");

        TestQuestionReponse.webdriver.findElement(By.cssSelector(".h-\\[100px\\]")).click();
        TestQuestionReponse.webdriver.findElement(By.cssSelector(".h-\\[100px\\]")).sendKeys("question?");

        // Check if the textarea contains the correct text
        WebElement textarea = TestQuestionReponse.webdriver.findElement(By.cssSelector(".h-\\[100px\\]"));
        Assertions.assertEquals("question?", textarea.getAttribute("value"), "Textarea does not contain the correct text");

        TestQuestionReponse.webdriver.findElement(By.cssSelector(".leading-5:nth-child(1)")).click();
        TestQuestionReponse.webdriver.findElement(By.cssSelector(".p-icon")).click();

        // Add more assertions here based on what you want to test after the button click
    }

    @AfterAll
    public static void afterTests() {
        if (TestQuestionReponse.webdriver != null) {
            TestQuestionReponse.webdriver.quit();
        }
    }
}
